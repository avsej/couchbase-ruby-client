#!/usr/bin/env bash

#  Copyright 2020-2021 Couchbase, Inc.
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

PROJECT_ROOT="$( cd "$(dirname "$0"/../..)" >/dev/null 2>&1 ; pwd -P )"

echo "HOSTNAME=${HOSTNAME}"
echo "NODE_NAME=${NODE_NAME}"
echo "CONTAINER_TAG=${CONTAINER_TAG}"
echo "JENKINS_SLAVE_LABELS=${JENKINS_SLAVE_LABELS}"
echo "NODE_LABELS=${NODE_LABELS}"

set -x
set -e

CB_RUBY_VERSION=${CB_RUBY_VERSION:-3.0}

if [ "$(uname -s)" = "Linux" ]
then
  OS_ID=unknown
  OS_VERSION=unknown
  if [ -f /etc/os-release ]
  then
      OS_ID=$(grep -o '^ID=.*' /etc/os-release | sed 's/ID=\|"//g')
      OS_VERSION=$(grep -o '^VERSION_ID=.*' /etc/os-release | sed 's/VERSION_ID=\|"//g')
  fi

  if [ -f /etc/alpine-release ]
  then
      export CB_CC="/usr/bin/gcc"
      export CB_CXX="/usr/bin/g++"
  elif [ "${OS_ID}" != "ubuntu" -a  "${OS_ID}" != "pop" ]
  then
      export PATH="$(realpath ~/.cmake-3.21.2/bin):$PATH"
      if [ "${OS_ID}" = "amzn" ]
      then
          export CB_CC="gcc10-cc"
          export CB_CXX="gcc10-c++"
      else
          sudo yum install -y libstdc++-static
          cc_prefix=/opt/rh/devtoolset-9/root
          export CB_CC="${cc_prefix}/bin/gcc"
          export CB_CXX="${cc_prefix}/bin/g++"
      fi
  fi
  source /usr/local/share/chruby/chruby.sh
fi
if [ "$(uname -s)" = "Darwin" ]
then
    if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
    then
      ruby_prefix="$(brew --prefix ruby)"
      ruby_abi_version=$(${ruby_prefix}/bin/ruby -rrbconfig -e'puts RbConfig::CONFIG["ruby_version"]')
      export PATH="${ruby_prefix}/bin:${HOME}/.gem/ruby/${ruby_abi_version}/bin:$PATH"
      export LDFLAGS="-L${ruby_prefix}/lib"
      export CPPFLAGS="-L${ruby_prefix}/include"
      export PKG_CONFIG_PATH="${ruby_prefix}/lib/pkgconfig"
    else
      source $(brew --prefix chruby)/share/chruby/chruby.sh
    fi
#   # MacOS has issues building BoringSSL using GCC compiler
#   for v in 13 12 11
#   do
#       cc_prefix=$(brew --prefix gcc@${v})
#       if [ -d ${cc_prefix} ]
#       then
#           export CB_CC="${cc_prefix}/bin/gcc-${v}"
#           export CB_CXX="${cc_prefix}/bin/g++-${v}"
#           export CB_AR="${cc_prefix}/bin/gcc-ar-${v}"
#           break
#       fi
#   done
fi

CB_GEM_INSTALL_OPTIONS=
if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
then
  CB_GEM_INSTALL_OPTIONS="--user-install"
else
  chruby ruby-${CB_RUBY_VERSION}
fi

which ruby gem bundle
ruby --version
bundle --version

gem install ${CB_GEM_INSTALL_OPTIONS} bundler gem-compiler

bundle config set --local path ${PROJECT_ROOT}/vendor/bundle

bundle install --verbose
export CB_EXT_BUILD_DIR="${PROJECT_ROOT}/build-${RUBY_VERSION}-${BUILD_NUMBER}"
${PROJECT_ROOT}/bin/jenkins/patch-version ${BUILD_NUMBER}

bundle exec rake build
full_version=$(ruby -r${PROJECT_ROOT}/lib/couchbase/version.rb -e "puts Couchbase::VERSION[:sdk]")
source="${PROJECT_ROOT}/pkg/couchbase-${full_version}.gem"
precompiled="${PROJECT_ROOT}/pkg/binary/$(ruby -rrbconfig -e 'print RbConfig::CONFIG["ruby_version"]')"
mkdir -p ${precompiled}

CB_GEM_COMPILE="gem compile"
if [ "x${CB_RUBY_VERSION}" = "xbrew" ]
then
  gem_compiler_plugin=$(ruby -rrubygems -e "puts Gem.find_files('rubygems_plugin.rb').grep(/gem-compiler/)")
  CB_GEM_COMPILE="ruby -rrubygems -r${gem_compiler_plugin} -S gem compile"
fi

export CB_STATIC_BORINGSSL=1
export CB_REMOVE_EXT_DIRECTORY=1
if [ ! -f /etc/alpine-release ]
then
    export CB_STATIC_STDLIB=1
fi
${CB_GEM_COMPILE} --prune --verbose --output ${precompiled} ${source}

ls -lh ${precompiled}/*.gem
